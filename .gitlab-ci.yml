include:
  - remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v2/.ci-ext-devel.yml'

stages:
  - build_base
  - build
  - build_multiarch
  - run


.container-builder-cscs-gh200:
  # See for customization and possible variables https://gitlab.com/cscs-ci/ci-testing/webhook-ci/gitlab-runner-k8s-container-builder
  tags: [santis-container-builder]
  script:
    - build_new_container
  variables:
    CSCS_REBUILD_POLICY: "if-not-exists"
    ARCH: 'aarch64'

.dynamic-image-name:
  before_script:
    - DOCKER_TAG=`eval cat $WATCH_FILECHANGES | sha256sum | head -c 16`
    - export PERSIST_IMAGE_NAME=$PERSIST_IMAGE_NAME:$DOCKER_TAG
    - echo "BASE_IMAGE=$PERSIST_IMAGE_NAME" > build.env
  artifacts:
    reports:
      dotenv: build.env
  variables:
    # the variables below MUST be set to a sane value. They are mentioned here, to see
    # which variables should be set.
    DOCKERFILE: ci/docker/Dockerfile.base # overwrite with the real path of the Dockerfile
    PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/base/my_base_image # Important: No version-tag
    WATCH_FILECHANGES: 'ci/docker/Dockerfile.base "path/to/another/file with whitespaces.txt"'

.container-builder-cscs-zen2:
  extends: .container-builder
  variables:
    ARCH: 'x86_64'


.container-runner-santis-gh200:
  tags: [santis-container-runner]
  extends: .container-runner
  variables:
    ARCH: 'aarch64'

.make-multiarch-image:
  tags: [rosa-k8s]
  image: docker.io/finkandreas/cicd-ext-k8s-container-image-builder:podman-4.9.0
  stage: build_multiarch
  script:
    - !reference [.fetch-registry-tokens, script]
    - podman login -u $CSCS_REGISTRY_USER -p $CSCS_REGISTRY_PASSWORD $CSCS_REGISTRY
    - podman manifest create $PERSIST_IMAGE_NAME
    - podman manifest add $PERSIST_IMAGE_NAME docker://$PERSIST_IMAGE_NAME_AARCH64
    - podman manifest add $PERSIST_IMAGE_NAME docker://$PERSIST_IMAGE_NAME_X86_64
    - podman manifest push --all $PERSIST_IMAGE_NAME docker://$PERSIST_IMAGE_NAME

.build-base:
  stage: build_base
  variables:
    DOCKERFILE: docker/Dockerfile.base
    WATCH_FILECHANGES: $DOCKERFILE
    PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/${ARCH}/base/base_image
build base aarch64:
  extends: [.container-builder-cscs-gh200, .dynamic-image-name, .build-base]
  variables:
    DOCKER_BUILD_ARGS: '["TARGET_SYSTEM=alps-gh200-cpu"]'
build base x86_64:
  extends: [.container-builder-cscs-zen2, .dynamic-image-name, .build-base]
  variables:
    DOCKER_BUILD_ARGS: '["TARGET_SYSTEM=daint-mc"]'

.build:
  stage: build
  variables:
    DOCKERFILE: docker/Dockerfile
    DOCKER_BUILD_ARGS: '["BASE_IMG=$BASE_IMAGE"]'
    PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/${ARCH}/my_cool_image:${CI_COMMIT_SHORT_SHA}
build aarch64:
  extends: [.container-builder-cscs-gh200, .build]
  needs: ['build base aarch64']
build x86_64:
  extends: [.container-builder-cscs-zen2, .build]
  needs: ['build base x86_64']

make multiarch:
  extends: .make-multiarch-image
  variables:
    PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/my_cool_image:${CI_COMMIT_SHORT_SHA}
    PERSIST_IMAGE_NAME_AARCH64: $CSCS_REGISTRY_PATH/aarch64/my_cool_image:${CI_COMMIT_SHORT_SHA}
    PERSIST_IMAGE_NAME_X86_64: $CSCS_REGISTRY_PATH/x86_64/my_cool_image:${CI_COMMIT_SHORT_SHA}

.run:
  stage: run
  # use the multi-arch image
  image: $CSCS_REGISTRY_PATH/my_cool_image:${CI_COMMIT_SHORT_SHA}
  script:
    - /opt/hello/bin/hello
  variables:
    SLURM_JOB_NUM_NODES: 2
    SLURM_NTASKS: 2
    USE_MPI: 'YES'
run aarch64:
  extends: [.container-runner-santis-gh200, .run]
run x86_64:
  extends: [.container-runner-daint-gpu, .run]

